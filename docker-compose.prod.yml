version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: news_ngo_db_prod
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend

  # Application
  app:
    build: .
    container_name: news_ngo_api_prod
    depends_on:
      - db
    environment:
      PG_HOST: db
      PG_PORT: 5432
      PG_DB: ${PG_DB}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      EMAIL_SERVICE: ${EMAIL_SERVICE}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      EMAIL_FROM: ${EMAIL_FROM}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      NODE_ENV: production
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - uploads:/app/src/uploads
      - logs:/app/logs
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { if (res.statusCode !== 200) process.exit(1); })"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  uploads:
  logs:

networks:
  backend: